/*while (comprovarResolubleForats(matriu)) {
			comprovarResolubleForats(matriu);
			HidatoIO.writeHidatoMatrixToOutput(matriu);
			matriu = new int[tamany][tamany];
			emplenarForats(celesBuides,matriu);
		}*/
		
		
		
		
		/*
	private static boolean comprovarResolubleForats(int[][] matriu) {
		int posicionsAmbUnCami = 0;
		for (int i = 0; i < matriu.length; ++i) {
			for (int j = 0; j < matriu.length; ++j) {
				if (matriu[i][j] > -1) {
					int accessibles = accessible(i, j, matriu);
					if (accessibles == 0) return false;
					if (accessibles == 1) {
						++posicionsAmbUnCami;
						System.out.println("un sol cami detectat en : " + i + " " + j);
					}
				}
			}
		}
		System.out.println("posicionsAmbunCami: " + posicionsAmbUnCami);
		return (posicionsAmbUnCami < 2);
	}
*/
	/*private static int accessible(int i, int j, int[][] matriu) {
		int count = 0;
		for (int ii = -1; ii < 2; ++ii) {
			for (int jj = -1; jj < 2; ++jj) {
				if (posicioValida(i, j, ii+i, jj+j) && dinsLimits (i+ii, j+jj, matriu.length, matriu[0].length) && !self(ii,jj) && matriu[i+ii][j+jj] > -1) {

					System.out.println(matriu[i][j]);

					System.out.println(i+""+ii + " " + j+""+jj);
					count++;
				}
			}
		}
		return count;
	}*/